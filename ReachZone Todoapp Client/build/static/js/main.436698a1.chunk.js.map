{"version":3,"sources":["Components/ThemeContext/ThemeContext.js","Components/Home/SignUp.js","Components/Home/Signin.js","Components/Dashboard/Dashboard.js","App.js","serviceWorker.js","index.js"],"names":["ThemeContextProvider","React","createContext","ThemeContext","props","useState","theme","setTheme","toggle","setToggle","Provider","value","changeTheme","children","SignUp","state","name","errorArray","loginErrorIndex","password","password2","email","emailForLogin","showSpinner","window","scrollTo","e","this","setState","tries","preventDefault","errors","push","length","makeSignupReq","fetch","method","headers","body","JSON","stringify","then","response","json","resJson","catch","err","message","signupBody","error","swal","history","context","Fragment","className","style","display","justifyContent","backgroundColor","fontSize","cursor","to","onSubmit","handleSignup","bind","htmlFor","onChange","target","autoFocus","placeholder","type","id","includes","color","marginTop","marginBottom","icon","faInfoCircle","disabled","Spinner","width","height","float","size","Component","contextType","SignIn","makeSigninReq","signinBody","localStorage","setItem","user","Dashboard","handleCreateList","a","listname","button","text","closeModal","isloading","location","_id","newlists","console","log","lists","handleUpdateList","handleUpdateTask","listId","taskId","taskname","updatedTask","handleDeleteList","title","buttons","dangerMode","willDelete","deleteResponse","handleDeleteTask","handleAddTask","task","userexist","parse","getItem","onClick","clear","faArrowCircleRight","faListUl","map","list","key","tasks","faTrash","faPen","index","faPlus","App","path","component","exact","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"gWACaA,EAAuBC,IAAMC,gBAsB3BC,EArBM,SAASC,GAAO,IAAD,EACTC,mBAAS,SADA,mBAC5BC,EAD4B,KACrBC,EADqB,OAEPF,oBAAS,GAFF,mBAE5BG,EAF4B,KAEpBC,EAFoB,KAcpC,OACI,kBAACT,EAAqBU,SAAtB,CAA+BC,MAAO,CAAEL,QAAOM,YAZ9B,WACAH,GAAP,IAATD,GAEGD,GADQ,IAATC,EACU,QAGA,WAORJ,EAAMS,WCXMC,E,YAEjB,WAAYV,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CAETC,KAAM,GACNC,WAAY,GACZC,gBAAiB,GACjBC,SAAU,GACVC,UAAW,GACXC,MAAO,GACPC,cAAe,GACfC,aAAa,GAXF,E,iFAmBfC,OAAOC,SAAS,EAAG,K,mCAGVC,GACTC,KAAKC,SAAS,CAAEC,MAAOF,KAAKZ,MAAMc,MAAQ,IAC1CH,EAAEI,iBACF,IAAMC,EAAS,GACVJ,KAAKZ,MAAMM,OACZU,EAAOC,KAAK,SAEXL,KAAKZ,MAAMC,MACZe,EAAOC,KAAK,QAEXL,KAAKZ,MAAMI,UACZY,EAAOC,KAAK,YAEZL,KAAKZ,MAAMI,WAAaQ,KAAKZ,MAAMK,WACnCW,EAAOC,KAAK,YAEhBL,KAAKC,SAAS,CAAEX,WAAYc,IAEN,IAAlBA,EAAOE,SACPN,KAAKC,SAAS,CAAEL,aAAa,IAC7BI,KAAKO,mB,4KAQHP,KAAKZ,MAHHC,E,EAAAA,KACJG,E,EAAAA,SACAE,E,EAAAA,M,SAGqBc,MAAM,oDAAqD,CAChFC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBxB,OACAG,WACAE,YAIHoB,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,U,QAdhBC,E,QAgBSC,OACXtB,KAAKC,SAAS,CAAEL,aAAa,IAC7B2B,IAAK,GAAIF,EAAWC,MAAO,UAI3BC,IAAK,qBAAsB,sBAAuB,WAAWT,KAAK,kBAAM,EAAKrC,MAAM+C,QAAQnB,KAAK,a,mIAS9F,IAAD,OACGf,EAAeU,KAAKZ,MAApBE,WACAX,EAAUqB,KAAKyB,QAAf9C,MACR,OACI,kBAAC,IAAM+C,SAAP,KAEI,yBAAKC,UAAS,2BAAgC,SAAVhD,EAAmB,qBAAuB,0BAAhE,oBACV,yBAAKiD,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAAYH,UAAU,OACjE,yBAAKC,MAAO,CAAEG,gBAAgB,GAAD,OAAe,SAAVpD,EAAmB,mBAAqB,UAAagD,UAAS,gCAAqC,SAAVhD,EAAmB,aAAe,oBAEzJ,kBAAC,IAAM+C,SAAP,KACI,wBAAIC,UAAU,qBAAd,YACA,wBAAIC,MAAO,CAAEI,SAAU,IAAML,UAAS,UAAe,SAAVhD,EAAmB,cAAgB,iBAAxC,UAAtC,WAEKqB,KAAKZ,MAAMQ,aACZ,uBAAGgC,MAAO,CAAEK,OAAQ,WAAaN,UAAU,uBAA3C,4BAE6B,kBAAC,IAAD,CAAMO,GAAG,WAAT,UAGjC,0BAAMP,UAAU,UAAUQ,SAAUnC,KAAKoC,aAAaC,KAAKrC,OACvD,yBAAK2B,UAAU,YACX,2BAAOA,UAAS,UAAe,SAAVhD,EAAmB,aAAe,mBAAqB2D,QAAQ,SAApF,QAGA,2BAAOtD,MAAOgB,KAAKZ,MAAMC,KAAMkD,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEZ,KAAMU,EAAEyC,OAAOxD,SAAUyD,WAAS,EAACC,YAAY,uBAAuBC,KAAK,OAAOhB,UAAU,eAAeiB,GAAG,cAC7KtD,EAAWuD,SAAS,SAAW,2BAAOjB,MAAO,CAAEkB,MAAO,MAAOC,UAAW,GAAIC,aAAc,KAAM,kBAAC,IAAD,CAAiBC,KAAMC,IAActB,MAAO,CAAEkB,MAAO,SAAtH,2BAMpC,yBAAKnB,UAAU,YACX,2BAAOA,UAAS,UAAe,SAAVhD,EAAmB,aAAe,mBAAqB2D,QAAQ,SAApF,SAGA,2BAAOtD,MAAOgB,KAAKZ,MAAMM,MAAQ6C,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEP,MAAOK,EAAEyC,OAAOxD,SAAU0D,YAAY,mBAAmBC,KAAK,QAAQhB,UAAU,eAAeiB,GAAG,UACnKtD,EAAWuD,SAAS,UAAY,2BAAOjB,MAAO,CAAEkB,MAAO,MAAOC,UAAW,GAAIC,aAAc,KAAM,kBAAC,IAAD,CAAiBC,KAAMC,IAActB,MAAO,CAAEkB,MAAO,SAAtH,sBAGrC,yBAAKnB,UAAU,YACX,2BAAOA,UAAS,UAAe,SAAVhD,EAAmB,aAAe,mBAAqB2D,QAAQ,SAApF,YAGA,2BAAOtD,MAAOgB,KAAKZ,MAAMI,SAAU+C,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAET,SAAUO,EAAEyC,OAAOxD,SAAU0D,YAAY,iBAAiBC,KAAK,WAAWhB,UAAU,eAAeiB,GAAG,aACzKtD,EAAWuD,SAAS,aAAe,2BAAOjB,MAAO,CAAEkB,MAAO,MAAOC,UAAW,GAAIC,aAAc,KAAM,kBAAC,IAAD,CAAiBC,KAAMC,IAActB,MAAO,CAAEkB,MAAO,SAAtH,oBAExC,yBAAKnB,UAAU,YACX,2BAAOW,QAAQ,SAAf,qBAGA,2BAAOtD,MAAOgB,KAAKZ,MAAMK,UAAW8C,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAER,UAAWM,EAAEyC,OAAOxD,SAAU0D,YAAY,kBAAkBC,KAAK,WAAWhB,UAAU,eAAeiB,GAAG,cAC5KtD,EAAWuD,SAAS,aAAe,2BAAOjB,MAAO,CAAEkB,MAAO,MAAOC,UAAW,GAAIC,aAAc,KAAM,kBAAC,IAAD,CAAiBC,KAAMC,IAActB,MAAO,CAAEkB,MAAO,SAAtH,iCAOxC,yBAAKnB,UAAU,YAEP3B,KAAKZ,MAAMQ,YACP,4BAAQ+B,UAAU,mBAAmBwB,UAAQ,GAA7C,mBAA+DnD,KAAKZ,MAAMQ,aAAe,kBAACwD,EAAA,EAAD,CAASxB,MAAO,CAAEyB,MAAO,GAAIC,OAAQ,GAAIC,MAAO,SAAWC,KAAK,UAAzJ,MAEA,4BAAQ7B,UAAU,oBAAlB,sB,GArJZ8B,aAAftE,EACVuE,YAAcrF,E,ICDJsF,E,YAEjB,WAAYlF,GAAQ,IAAD,8BACf,4CAAMA,KACDW,MAAQ,CACTE,WAAY,GACZE,SAAU,GACVC,UAAW,GACXC,MAAO,GACPE,aAAa,GAPF,E,iFAefC,OAAOC,SAAS,EAAG,K,mCAGVC,GAETA,EAAEI,iBACF,IAAMC,EAAS,GACVJ,KAAKZ,MAAMM,OACZU,EAAOC,KAAK,SAEXL,KAAKZ,MAAMI,UACZY,EAAOC,KAAK,YAEhBL,KAAKC,SAAS,CAAEX,WAAYc,IAEN,IAAlBA,EAAOE,SACPN,KAAKC,SAAS,CAAEL,aAAa,IAC7BI,KAAK4D,mB,mKAKmB5D,KAAKZ,MAAzBM,E,EAAAA,MAAOF,E,EAAAA,S,SAEUgB,MAAM,oDAAqD,CAChFC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBnB,QACAF,eAIHsB,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,U,QAbhByC,E,QAeSvC,OACXtB,KAAKC,SAAS,CAAEL,aAAa,IAC7B2B,IAAK,GAAIsC,EAAWvC,MAAO,WAI3BwC,aAAaC,QAAQ,WAAYnD,KAAKC,UAAU,CAAEgD,gBAClD7D,KAAKvB,MAAM+C,QAAQnB,KAAK,aAAc,CAAE2D,KAAMH,K,mIAS5C,IAAD,OACGlF,EAAUqB,KAAKyB,QAAf9C,MACAW,EAAeU,KAAKZ,MAApBE,WACR,OACI,kBAAC,IAAMoC,SAAP,KAEI,yBAAKC,UAAS,2BAAgC,SAAVhD,EAAmB,qBAAuB,0BAAhE,oBACV,yBAAKiD,MAAO,CAAEC,QAAS,OAAQC,eAAgB,UAAYH,UAAU,OAEjE,yBAAKC,MAAO,CAAEG,gBAAgB,GAAD,OAAe,SAAVpD,EAAmB,mBAAqB,UAAagD,UAAS,gCAAqC,SAAVhD,EAAmB,aAAe,oBAEzJ,kBAAC,IAAM+C,SAAP,KACI,wBAAIC,UAAS,qBAAb,YACA,wBAAIC,MAAO,CAAEI,SAAU,IAAML,UAAS,oBAAtC,YAEK3B,KAAKZ,MAAMQ,aACZ,uBAAGgC,MAAO,CAAEK,OAAQ,WAAaN,UAAS,UAAe,SAAVhD,EAAmB,cAAgB,iBAAxC,UAA1C,4BAE6B,kBAAC,IAAD,CAAMuD,GAAG,KAAT,YAGjC,0BAAMP,UAAU,UAAUQ,SAAUnC,KAAKoC,aAAaC,KAAKrC,OAKvD,yBAAK2B,UAAU,YACX,2BAAOA,UAAS,UAAe,SAAVhD,EAAmB,aAAe,mBAAqB2D,QAAQ,SAApF,SAGA,2BAAOC,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEP,MAAOK,EAAEyC,OAAOxD,SAAU0D,YAAY,mBAAmBC,KAAK,QAAQhB,UAAU,eAAeiB,GAAG,UACzItD,EAAWuD,SAAS,UAAY,2BAAOjB,MAAO,CAAEkB,MAAO,MAAOC,UAAW,GAAIC,aAAc,KAAM,kBAAC,IAAD,CAAiBC,KAAMC,IAActB,MAAO,CAAEkB,MAAO,SAAtH,sBAGrC,yBAAKnB,UAAU,YACX,2BAAOA,UAAS,UAAe,SAAVhD,EAAmB,aAAe,mBAAqB2D,QAAQ,SAApF,YAGA,2BAAOC,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAET,SAAUO,EAAEyC,OAAOxD,SAAU0D,YAAY,iBAAiBC,KAAK,WAAWhB,UAAU,eAAeiB,GAAG,aAC7ItD,EAAWuD,SAAS,aAAe,2BAAOjB,MAAO,CAAEkB,MAAO,MAAOC,UAAW,GAAIC,aAAc,KAAM,kBAAC,IAAD,CAAiBC,KAAMC,IAActB,MAAO,CAAEkB,MAAO,SAAtH,yBAQxC,yBAAKnB,UAAU,YAEP3B,KAAKZ,MAAMQ,YACP,4BAAQ+B,UAAU,mBAAmBwB,UAAQ,GAA7C,mBAA+DnD,KAAKZ,MAAMQ,aAAe,kBAACwD,EAAA,EAAD,CAASxB,MAAO,CAAEyB,MAAO,GAAIC,OAAQ,GAAIC,MAAO,SAAWC,KAAK,UAAzJ,MAEA,4BAAQ7B,UAAU,oBAAlB,sB,GA5HZ8B,aAAfE,EACVD,YAAcrF,E,oBCFJ4F,E,YAEjB,WAAYxF,GAAQ,IAAD,8BACf,4CAAMA,KAgCVyF,iBAjCmB,qBAiCA,iCAAAC,EAAA,qDACf5C,IACI,6BAEI,kDAGA,2BAAOgB,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEmE,SAAUrE,EAAEyC,OAAOxD,SAAU2D,KAAK,OAAOhB,UAAU,eAAee,YAAY,eAE1H,CACI2B,OAAQ,CACJC,KAAM,cACNC,YAAY,KAMnBzD,KAjBL,qBAiBU,4BAAAqD,EAAA,wDACD,EAAKlE,SAAS,CAACuE,WAAU,KACtB,EAAKpF,MAAMgF,SAFb,uBAGE,EAAKnE,SAAS,CAACuE,WAAU,IAH3B,SAIyBhE,MAAM,0DAAD,OAA2D,EAAK/B,MAAMgG,SAASrF,MAAM4E,KAAKU,KAAO,CACzHjE,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBuD,SAAU,EAAKhF,MAAMgF,aAIxBtD,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAhBxB,OAIQuD,EAJR,OAiBEC,QAAQC,IAAIF,GACRA,EAASrD,OACT,EAAKrB,SAAS,CAACuE,WAAU,IACzBjD,IAAKoD,EAASvD,QAAS,GAAI,WAG3B,EAAKnB,SAAS,CAACuE,WAAU,IACzB,EAAKvE,SAAS,CAACmE,SAAS,KACxB,EAAKnE,SAAS,CAAE6E,MAAOH,EAASG,SAzBtC,0CAlBK,yCAjCA,EA0FnBC,iBA1FmB,sCA0FA,WAAgBnC,GAAhB,oBAAAuB,EAAA,qDACf5C,IACI,6BAEI,mDAGA,6BAEA,2BAAOgB,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEmE,SAAUrE,EAAEyC,OAAOxD,SAAU2D,KAAK,OAAOhB,UAAU,eAAee,YAAY,mBAE1H,CACI2B,OAAQ,CACJC,KAAM,cACNC,YAAY,KAMnBzD,KAnBL,qBAmBU,4BAAAqD,EAAA,yDAEE,EAAK/E,MAAMgF,SAFb,uBAGE,EAAKnE,SAAS,CAACuE,WAAU,IAH3B,SAIyBhE,MAAM,0DAAD,OAA2D,EAAK/B,MAAMgG,SAASrF,MAAM4E,KAAKU,IAA1F,YAAiG9B,GAAM,CAC/HnC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBuD,SAAU,EAAKhF,MAAMgF,aAIxBtD,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAhBxB,QAIQuD,EAJR,QAkBerD,OACT,EAAKrB,SAAS,CAACuE,WAAU,IACzBjD,IAAKoD,EAASvD,QAAS,GAAI,WAG3B,EAAKnB,SAAS,CAACuE,WAAU,IACzB,EAAKvE,SAAS,CAACmE,SAAS,KACxB,EAAKnE,SAAS,CAAE6E,MAAOH,EAASG,SAzBtC,0CApBK,yCA1FA,wDAsJnBE,iBAtJmB,sCAsJA,WAAgBC,EAAQC,GAAxB,oBAAAf,EAAA,qDACf5C,IACI,6BAEI,8CAGA,6BAEA,2BAAOgB,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEkF,SAAUpF,EAAEyC,OAAOxD,SAAU2D,KAAK,OAAOhB,UAAU,eAAee,YAAY,mBAE1H,CACI2B,OAAQ,CACJC,KAAM,cACNC,YAAY,KAMnBzD,KAnBL,qBAmBU,4BAAAqD,EAAA,yDAEE,EAAK/E,MAAM+F,SAFb,uBAGE,EAAKlF,SAAS,CAACuE,WAAU,IAH3B,SAIyBhE,MAAM,0DAAD,OAA2D,EAAK/B,MAAMgG,SAASrF,MAAM4E,KAAKU,IAA1F,YAAiGO,EAAjG,YAA2GC,GAAU,CAC7IzE,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBuE,YAAa,EAAKhG,MAAM+F,aAI3BrE,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAhBxB,OAIQuD,EAJR,OAiBEC,QAAQC,IAAIF,GACRA,EAASrD,OACT,EAAKrB,SAAS,CAACuE,WAAU,IACzBjD,IAAKoD,EAASvD,QAAS,GAAI,WAG3B,EAAKnB,SAAS,CAACuE,WAAU,IACzB,EAAKvE,SAAS,CAACkF,SAAS,KACxB,EAAKlF,SAAS,CAAE6E,MAAOH,EAASG,SAzBtC,0CApBK,yCAtJA,0DAgNnBO,iBAhNmB,sCAgNA,WAAgBzC,GAAhB,oBAAAuB,EAAA,qDACf5C,IAAK,CACD+D,MAAO,gBACPhB,KAAK,8BACLrB,KAAM,OACNsC,SAAS,EACTC,YAAY,IAEX1E,KAPL,sCAOU,WAAO2E,GAAP,eAAAtB,EAAA,wDACF,EAAKlE,SAAS,CAACuE,WAAU,KACrBiB,EAFF,gCAI+BjF,MAAM,0DAAD,OAA2D,EAAK/B,MAAMgG,SAASrF,MAAM4E,KAAKU,IAA1F,YAAiG9B,GAAM,CACrInC,OAAQ,SACRC,QAAS,CACL,eAAgB,sBAGnBI,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAZxB,QAIQsE,EAJR,QAaqBpE,OACf,EAAKrB,SAAS,CAACuE,WAAU,IACzBjD,IAAKmE,EAAetE,QAAS,GAAI,WAGjC,EAAKnB,SAAS,CAACuE,WAAU,IACzBjD,IAAK,GAAI,eAAgB,WACzB,EAAKtB,SAAS,CAAE6E,MAAOY,EAAeZ,SApB5C,yCAPV,uDADe,yCAhNA,wDAsPnBa,iBAtPmB,sCAsPA,WAAgBV,EAAQC,GAAxB,oBAAAf,EAAA,qDACf5C,IAAK,CACD+D,MAAO,gBACPhB,KAAK,8BACLrB,KAAM,OACNsC,SAAS,EACTC,YAAY,IAEX1E,KAPL,sCAOU,WAAO2E,GAAP,eAAAtB,EAAA,yDACEsB,EADF,uBAEE,EAAKxF,SAAS,CAACuE,WAAU,IAF3B,SAG+BhE,MAAM,0DAAD,OAA2D,EAAK/B,MAAMgG,SAASrF,MAAM4E,KAAKU,IAA1F,YAAiGO,EAAjG,YAA2GC,GAAU,CACnJzE,OAAQ,SACRC,QAAS,CACL,eAAgB,sBAGnBI,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAXxB,QAGQsE,EAHR,QAYqBpE,OACf,EAAKrB,SAAS,CAACuE,WAAU,IACzBjD,IAAKmE,EAAetE,QAAS,GAAI,WAGjC,EAAKnB,SAAS,CAACuE,WAAU,IACzBjD,IAAK,GAAI,eAAgB,WAEzB,EAAKtB,SAAS,CAAE6E,MAAOY,EAAeZ,SApB5C,yCAPV,uDADe,yCAtPA,0DA2RnBc,cA3RmB,sCA2RH,WAAgBhD,GAAhB,oBAAAuB,EAAA,qDACZ5C,IACI,6BAEI,6CAGA,2BAAOgB,SAAU,SAACxC,GAAD,OAAO,EAAKE,SAAS,CAAEkF,SAAUpF,EAAEyC,OAAOxD,SAAU2D,KAAK,OAAOhB,UAAU,eAAee,YAAY,gBAE1H,CACI2B,OAAQ,CACJC,KAAM,WACNC,YAAY,KAMnBzD,KAjBL,qBAiBU,4BAAAqD,EAAA,yDAEE,EAAK/E,MAAM+F,SAFb,uBAGE,EAAKlF,SAAS,CAACuE,WAAU,IAH3B,SAIyBhE,MAAM,uDAAD,OAAwD,EAAK/B,MAAMgG,SAASrF,MAAM4E,KAAKU,IAAvF,YAA8F9B,GAAM,CAC5HnC,OAAQ,OACRC,QAAS,CACL,eAAgB,oBAEpBC,KAAMC,KAAKC,UAAU,CACjBgF,KAAM,EAAKzG,MAAM+F,aAIpBrE,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAIA,IAChBC,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAhBxB,QAIQuD,EAJR,QAkBerD,OACT,EAAKrB,SAAS,CAACuE,WAAU,IACzBjD,IAAKoD,EAASvD,QAAS,GAAI,WAG3B,EAAKnB,SAAS,CAACuE,WAAU,IACzB,EAAKvE,SAAS,CAACkF,SAAS,KACxB,EAAKlF,SAAS,CAAE6E,MAAOH,EAASG,SAzBtC,0CAlBE,yCA3RG,sDAEf,EAAK1F,MAAQ,CACT0F,MAAO,GACPV,SAAU,GACVe,SAAU,GACVX,WAAW,GANA,E,sMAWXsB,EAAYlF,KAAKmF,MAAMjC,aAAakC,QAAQ,aAChDpB,QAAQC,IAAIiB,GACRA,EACAtF,MAAM,uDAAD,OAAwDR,KAAKvB,MAAMgG,SAASrF,MAAM4E,KAAKU,KAAO,CAC/FjE,OAAQ,MACRC,QAAS,CACL,eAAgB,sBAInBI,KAAK,SAACC,GAAD,OAAcA,EAASC,SAC5BF,KAAK,SAAAG,GAAO,OAAI,EAAKhB,SAAS,CAAE6E,MAAO7D,EAAQ6D,UAC/C5D,MAAM,SAAAC,GAAG,OAAIA,EAAIC,UAGtBpB,KAAKvB,MAAM+C,QAAQnB,KAAK,W,mIAsTtB,IAAD,SACwBL,KAAKyB,QAA5BxC,EADD,EACCA,YAAaN,EADd,EACcA,MACfqF,EAAO,GAUX,OARIA,EADAhE,KAAKvB,MAAMgG,SAASrF,MACbY,KAAKvB,MAAMgG,SAASrF,MAAM4E,KAG1B,CAAE3E,KAAM,MAMf,yBAAKsC,UAAS,+BAAoC,SAAVhD,EAAmB,qBAAuB,0BAApE,eACV,yBAAKgD,UAAS,kBAAgC,uBAC1C,wBAAIA,UAAU,IAAd,WAA0BqC,EAAK3E,KAA/B,MAEA,yBAAKsC,UAAU,cACX,0BAAMA,UAAU,QAAhB,aACA,2BAAOC,MAAO,CAAE0B,OAAQ,GAAID,MAAO,GAAIpB,OAAQ,WAAaN,UAAU,OAAOY,SAAU,kBAAMtD,KAAe0D,KAAK,cAErH,yBAAKsD,QAAS,kBAAM1E,IAAK,CACrB+D,MAAO,gBACPhB,KAAK,IACLrB,KAAM,OACNsC,SAAS,EACTC,YAAY,IACb1E,KAAK,WACJgD,aAAaoC,MAAM,YACnB,EAAKzH,MAAM+C,QAAQnB,KAAK,cAGxBuB,MAAO,CAAE2B,MAAO,QAASR,WAAY,GAAId,OAAQ,YACjD,0BAAMN,UAAU,UAAhB,UAAgC,kBAAC,IAAD,CAAiBsB,KAAMkD,MAAvD,OAIR,yBAAKxE,UAAU,uBAEP3B,KAAKZ,MAAMoF,WAAa,yBAAK7C,UAAU,mCACvC,kBAACyB,EAAA,EAAD,OAIJ,yBAAKxB,MAAO,CAAEyB,MAAO,KAAO1B,UAAU,gBAAtC,mBACoB,0BAAMA,UAAU,uBAAuB3B,KAAKZ,MAAM0F,MAAMxE,SAE5E,yBAAKsB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,YAAcH,UAAU,YACnE,4BAAQsE,QAAS,kBAAM,EAAK/B,oBAAoBvC,UAAU,wBAA1D,eACgB,kBAAC,IAAD,CAAiBsB,KAAMmD,QAKvCpG,KAAKZ,MAAM0F,MAAMxE,OAAS,EACtB,yBAAKqB,UAAU,gBAEP3B,KAAKZ,MAAM0F,MAAMuB,IAAI,SAACC,GAClB,OACI,yBAAKC,IAAKD,EAAK1D,GAAIjB,UAAS,sBACxB,yBAAKA,UAAS,yBAA8B,SAAVhD,EAAmB,0BAA4B,4BAE7E,yBAAKgD,UAAS,UAAe,SAAVhD,EAAmB,0BAA4B,4BAC9D,wBAAIgD,UAAU,uBAAd,IAAsC2E,EAAKlC,SAA3C,IAAqD,0BAAMxC,MAAO,CAAEI,SAAU,IAAML,UAAU,4BAA4B2E,EAAKE,MAAMlG,OAAhF,UAArD,KAA2J,0BAAMsB,MAAO,CAAE2B,MAAO,SAAW0C,QAAS,kBAAM,EAAKZ,iBAAiBiB,EAAK1D,KAAKjB,UAAU,gCAA+B,kBAAC,IAAD,CAAiBC,MAAO,CAAEyB,MAAO,GAAIC,OAAQ,IAAML,KAAMwD,OAA7U,IAAgW,0BAAM7E,MAAO,CAAE2B,MAAO,SAAW0C,QAAS,kBAAM,EAAKlB,iBAAiBuB,EAAK1D,KAAKjB,UAAU,sCAAqC,kBAAC,IAAD,CAAiBC,MAAO,CAAEyB,MAAO,GAAIC,OAAQ,IAAML,KAAMyD,OAAxhB,OAGAJ,EAAKE,MAAMH,IAAI,SAACR,EAAMc,GAClB,OACI,yBAAKJ,IAAKV,EAAKX,OAAQvD,UAAU,kBAC7B,uBAAGA,UAAU,aAAY,0BAAMA,UAAU,IAAhB,IAAqBgF,EAAQ,EAA7B,KAAzB,IAAkEd,EAAKA,KAAvE,IAA6E,0BAAMjE,MAAO,CAAE2B,MAAO,SAAW0C,QAAS,kBAAM,EAAKN,iBAAiBW,EAAK1D,GAAIiD,EAAKX,SAASvD,UAAU,yBAAwB,kBAAC,IAAD,CAAiBsB,KAAMwD,IAAS7E,MAAO,CAAEyB,MAAO,GAAIC,OAAQ,GAAIR,MAAO,sBAAnR,IAAkT,0BAAMlB,MAAO,CAAE2B,MAAO,SAAW0C,QAAS,kBAAM,EAAKjB,iBAAiBsB,EAAK1D,GAAIiD,EAAKX,SAASvD,UAAU,8BAA6B,kBAAC,IAAD,CAAiBsB,KAAMyD,IAAO9E,MAAO,CAAEyB,MAAO,GAAIC,OAAQ,GAAIR,MAAO,sBAA3f,MACA,gCAShB,yBAAKlB,MAAO,CAAEC,QAAS,OAAQC,eAAgB,YAAcH,UAAU,YACnE,4BAAQsE,QAAS,kBAAM,EAAKL,cAAcU,EAAK1D,KAAKjB,UAAU,kCAA9D,YACa,kBAAC,IAAD,CAAiBsB,KAAM2D,aAYhE,uBAAGjF,UAAS,kBAAuB,SAAVhD,EAAmB,aAAe,eAA3D,6D,GA/aW8E,aAAlBQ,EACVP,YAAcrF,E,ICCJwI,E,iLAGjB,OACE,kBAAC,EAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,IAAIC,UAAW5H,EAAQ6H,OAAK,IACxC,kBAAC,IAAD,CAAOF,KAAK,UAAUC,UAAWpD,IACjC,kBAAC,IAAD,CAAOmD,KAAK,aAAaC,UAAW9C,W,GATfR,aCI3BwD,EAAcC,QACW,cAA7BrH,OAAO4E,SAAS0C,UAEe,UAA7BtH,OAAO4E,SAAS0C,UAEhBtH,OAAO4E,SAAS0C,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTxG,KAAK,SAAA6G,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBzI,QACfoI,UAAUC,cAAcO,YAI1BpD,QAAQC,IACN,iHAKE0C,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlB/C,QAAQC,IAAI,sCAGR0C,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,UAO5BzG,MAAM,SAAAI,GACLsD,QAAQtD,MAAM,4CAA6CA,KCxFjE6G,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDc1C,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,GAAwB3I,OAAO4E,SAASgE,MACpDC,SAAW7I,OAAO4E,SAASiE,OAIvC,OAGF7I,OAAO8I,iBAAiB,OAAQ,WAC9B,IAAMrB,EAAK,UAAMkB,GAAN,sBAEPvB,IAgEV,SAAiCK,EAAOC,GAEtC/G,MAAM8G,GACHxG,KAAK,SAAAC,GAEJ,IAAM6H,EAAc7H,EAASL,QAAQmI,IAAI,gBAEnB,MAApB9H,EAAS+H,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAMlI,KAAK,SAAA6G,GACjCA,EAAasB,aAAanI,KAAK,WAC7BjB,OAAO4E,SAASyE,aAKpB7B,EAAgBC,EAAOC,KAG1BrG,MAAM,WACL0D,QAAQC,IACN,mEArFAsE,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAMlI,KAAK,WACjC8D,QAAQC,IACN,gHAMJwC,EAAgBC,EAAOC,MCrC/BE,K","file":"static/js/main.436698a1.chunk.js","sourcesContent":["import React, {useState} from 'react'\r\nexport const ThemeContextProvider = React.createContext()\r\nconst ThemeContext = function(props){\r\n const [theme, setTheme] = useState('light')\r\n const [toggle, setToggle] = useState(false)\r\n  const changeTheme= function(){\r\n    (toggle===true ? setToggle(false): setToggle(true))\r\n    if(toggle===true){\r\n        setTheme('light')\r\n    }\r\n    else{\r\n        setTheme('dark')\r\n    }\r\n\r\n  }\r\n\r\nreturn (\r\n    <ThemeContextProvider.Provider value={{ theme, changeTheme}}>\r\n        {props.children}\r\n    </ThemeContextProvider.Provider>\r\n)\r\n}\r\n\r\nexport default ThemeContext","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { Spinner } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport swal from 'sweetalert';\r\nimport { ThemeContextProvider } from '../ThemeContext/ThemeContext';\r\nexport default class SignUp extends Component {\r\n    static contextType = ThemeContextProvider\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n\r\n            name: '',\r\n            errorArray: [],\r\n            loginErrorIndex: [],\r\n            password: '',\r\n            password2: '',\r\n            email: '',\r\n            emailForLogin: '',\r\n            showSpinner: false,\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n    }\r\n\r\n    handleSignup(e) {\r\n        this.setState({ tries: this.state.tries + 1 })\r\n        e.preventDefault()\r\n        const errors = [];\r\n        if (!this.state.email) {\r\n            errors.push('email')\r\n        }\r\n        if (!this.state.name) {\r\n            errors.push('name')\r\n        }\r\n        if (!this.state.password) {\r\n            errors.push('password')\r\n        }\r\n        if (this.state.password !== this.state.password2) {\r\n            errors.push('notMatch')\r\n        }\r\n        this.setState({ errorArray: errors })\r\n\r\n        if (errors.length === 0) {\r\n            this.setState({ showSpinner: true })\r\n            this.makeSignupReq()\r\n        }\r\n\r\n    }\r\n    async makeSignupReq() {\r\n        const { name,\r\n            password,\r\n            email }\r\n            = this.state\r\n\r\n        const signupBody = await fetch(\"https://todo-api-241.herokuapp.com/todoapi/signup\", {\r\n            method: 'Post',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                name,\r\n                password,\r\n                email,\r\n            })\r\n\r\n        })\r\n            .then((response) => response.json())\r\n            .then(resJson => resJson)\r\n            .catch(err => err.message)\r\n\r\n        if (signupBody.error) {\r\n            this.setState({ showSpinner: false })\r\n            swal('', signupBody.error, 'error')\r\n\r\n        }\r\n        else {\r\n            swal('Sign up successful', 'Click OK to Sign in', 'success').then(() => this.props.history.push('/signin'))\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { errorArray } = this.state\r\n        const { theme } = this.context\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className={`container-fluid  ${theme === 'dark' ? 'bg-dark text-light' : 'bg-light text-secondary'} form-container`}>\r\n                    <div style={{ display: 'flex', justifyContent: 'center' }} className=\"row\">\r\n                        <div style={{ backgroundColor: `${theme === 'dark' ? 'rgba(0,0,0,0.03)' : 'white'}` }} className={`col-md-4 col-sm-12 sf ${theme === 'dark' ? 'text-light' : ' text-secondary'}`}>\r\n\r\n                            <React.Fragment>\r\n                                <h3 className=\"text-center  my-2\">Todo App</h3>\r\n                                <h5 style={{ fontSize: 21 }} className={`${theme === 'dark' ? ' text-light' : 'text-secondary'} mr-3`}>SignUp</h5>\r\n                                {\r\n                                    !this.state.showSpinner &&\r\n                                    <p style={{ cursor: 'pointer' }} className=\"text-secondary mr-3\">\r\n\r\n                                        Already have an account? <Link to='/signin'>Login</Link>\r\n\r\n                                    </p>}\r\n                                <form className=\"si_form\" onSubmit={this.handleSignup.bind(this)}>\r\n                                    <div className=\"form-div\">\r\n                                        <label className={`${theme === 'dark' ? 'text-light' : ' text-secondary'}`} htmlFor=\"email\" >\r\n                                            Name\r\n                                                 </label>\r\n                                        <input value={this.state.name} onChange={(e) => this.setState({ name: e.target.value })} autoFocus placeholder=\"Enter your full name\" type=\"text\" className=\"form-control\" id=\"firstname\" />\r\n                                        {errorArray.includes('name') && <small style={{ color: 'red', marginTop: 15, marginBottom: 15 }}><FontAwesomeIcon icon={faInfoCircle} style={{ color: 'red' }} /> Enter your first name</small>}\r\n                                    </div>\r\n\r\n\r\n\r\n\r\n                                    <div className=\"form-div\">\r\n                                        <label className={`${theme === 'dark' ? 'text-light' : ' text-secondary'}`} htmlFor=\"email\" >\r\n                                            Email\r\n                                                </label>\r\n                                        <input value={this.state.email}  onChange={(e) => this.setState({ email: e.target.value })} placeholder=\"Enter your email\" type=\"email\" className=\"form-control\" id=\"email\" />\r\n                                        {errorArray.includes('email') && <small style={{ color: 'red', marginTop: 15, marginBottom: 15 }}><FontAwesomeIcon icon={faInfoCircle} style={{ color: 'red' }} /> Enter your email</small>}\r\n\r\n                                    </div>\r\n                                    <div className=\"form-div\">\r\n                                        <label className={`${theme === 'dark' ? 'text-light' : ' text-secondary'}`} htmlFor=\"phone\" >\r\n                                            Password\r\n                                                </label>\r\n                                        <input value={this.state.password} onChange={(e) => this.setState({ password: e.target.value })} placeholder=\"Enter password\" type=\"password\" className=\"form-control\" id=\"password\" />\r\n                                        {errorArray.includes('password') && <small style={{ color: 'red', marginTop: 15, marginBottom: 15 }}><FontAwesomeIcon icon={faInfoCircle} style={{ color: 'red' }} /> Enter password</small>}\r\n                                    </div>\r\n                                    <div className=\"form-div\">\r\n                                        <label htmlFor=\"phone\" >\r\n                                            Re-enter password\r\n                                                </label>\r\n                                        <input value={this.state.password2} onChange={(e) => this.setState({ password2: e.target.value })} placeholder=\"Retype password\" type=\"password\" className=\"form-control\" id=\"password3\" />\r\n                                        {errorArray.includes('notMatch') && <small style={{ color: 'red', marginTop: 15, marginBottom: 15 }}><FontAwesomeIcon icon={faInfoCircle} style={{ color: 'red' }} /> The password does not match</small>}\r\n                                    </div>\r\n\r\n\r\n\r\n\r\n\r\n                                    <div className=\"form-div\">\r\n                                        {\r\n                                            this.state.showSpinner ?\r\n                                                <button className=\"form-control btn\" disabled>Please wait.... {this.state.showSpinner && <Spinner style={{ width: 20, height: 20, float: 'right' }} size=\"small\" />}  </button>\r\n                                                :\r\n                                                <button className=\"form-control btn\" >Submit </button>\r\n                                        }\r\n\r\n                                    </div>\r\n                                </form>\r\n\r\n                            </React.Fragment>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom';\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport { Spinner } from 'reactstrap'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport swal from 'sweetalert';\r\nimport { ThemeContextProvider } from '../ThemeContext/ThemeContext';\r\nexport default class SignIn extends Component {\r\n    static contextType = ThemeContextProvider\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            errorArray: [],\r\n            password: '',\r\n            password2: '',\r\n            email: '',\r\n            showSpinner: false,\r\n\r\n\r\n\r\n\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        window.scrollTo(0, 0)\r\n    }\r\n\r\n    handleSignup(e) {\r\n\r\n        e.preventDefault()\r\n        const errors = [];\r\n        if (!this.state.email) {\r\n            errors.push('email')\r\n        }\r\n        if (!this.state.password) {\r\n            errors.push('password')\r\n        }\r\n        this.setState({ errorArray: errors })\r\n\r\n        if (errors.length === 0) {\r\n            this.setState({ showSpinner: true })\r\n            this.makeSigninReq()\r\n        }\r\n\r\n    }\r\n    async makeSigninReq() {\r\n        const { email, password } = this.state\r\n\r\n        const signinBody = await fetch(\"https://todo-api-241.herokuapp.com/todoapi/signin\", {\r\n            method: 'Post',\r\n            headers: {\r\n                'Content-type': 'application/json'\r\n            },\r\n            body: JSON.stringify({\r\n                email,\r\n                password,\r\n            })\r\n\r\n        })\r\n            .then((response) => response.json())\r\n            .then(resJson => resJson)\r\n            .catch(err => err.message)\r\n\r\n        if (signinBody.error) {\r\n            this.setState({ showSpinner: false })\r\n            swal('', signinBody.error, 'error')\r\n\r\n        }\r\n        else {\r\n            localStorage.setItem('todouser', JSON.stringify({ signinBody }))\r\n            this.props.history.push('/dashboard', { user: signinBody })\r\n\r\n        }\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    render() {\r\n        const { theme } = this.context\r\n        const { errorArray } = this.state\r\n        return (\r\n            <React.Fragment>\r\n\r\n                <div className={`container-fluid  ${theme === 'dark' ? 'bg-dark text-light' : 'bg-light text-secondary'} form-container`}>\r\n                    <div style={{ display: 'flex', justifyContent: 'center' }} className=\"row\">\r\n\r\n                        <div style={{ backgroundColor: `${theme === 'dark' ? 'rgba(0,0,0,0.03)' : 'white'}` }} className={`col-md-4 col-sm-12 sf ${theme === 'dark' ? 'text-light' : ' text-secondary'}`}>\r\n\r\n                            <React.Fragment>\r\n                                <h3 className={`text-center  my-2`}>Todo App</h3>\r\n                                <h5 style={{ fontSize: 21 }} className={`text-center my-4`}>Sign in</h5>\r\n                                {\r\n                                    !this.state.showSpinner &&\r\n                                    <p style={{ cursor: 'pointer' }} className={`${theme === 'dark' ? ' text-light' : 'text-secondary'} mr-3`}>\r\n\r\n                                        Already have an account? <Link to='/'>Sign Up</Link>\r\n\r\n                                    </p>}\r\n                                <form className=\"si_form\" onSubmit={this.handleSignup.bind(this)}>\r\n\r\n\r\n\r\n\r\n                                    <div className=\"form-div\">\r\n                                        <label className={`${theme === 'dark' ? 'text-light' : ' text-secondary'}`} htmlFor=\"email\" >\r\n                                            Email\r\n                                                </label>\r\n                                        <input onChange={(e) => this.setState({ email: e.target.value })} placeholder=\"Enter your email\" type=\"email\" className=\"form-control\" id=\"email\" />\r\n                                        {errorArray.includes('email') && <small style={{ color: 'red', marginTop: 15, marginBottom: 15 }}><FontAwesomeIcon icon={faInfoCircle} style={{ color: 'red' }} /> Enter your email</small>}\r\n\r\n                                    </div>\r\n                                    <div className=\"form-div\">\r\n                                        <label className={`${theme === 'dark' ? 'text-light' : ' text-secondary'}`} htmlFor=\"phone\">\r\n                                            Password\r\n                                                </label>\r\n                                        <input onChange={(e) => this.setState({ password: e.target.value })} placeholder=\"Enter password\" type=\"password\" className=\"form-control\" id=\"password\" />\r\n                                        {errorArray.includes('password') && <small style={{ color: 'red', marginTop: 15, marginBottom: 15 }}><FontAwesomeIcon icon={faInfoCircle} style={{ color: 'red' }} /> Enter your password</small>}\r\n                                    </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n                                    <div className=\"form-div\">\r\n                                        {\r\n                                            this.state.showSpinner ?\r\n                                                <button className=\"form-control btn\" disabled>Please wait.... {this.state.showSpinner && <Spinner style={{ width: 20, height: 20, float: 'right' }} size=\"small\" />}  </button>\r\n                                                :\r\n                                                <button className=\"form-control btn\" >Submit </button>\r\n                                        }\r\n\r\n                                    </div>\r\n                                </form>\r\n\r\n                            </React.Fragment>\r\n\r\n                        </div>\r\n\r\n\r\n                    </div>\r\n\r\n                </div>\r\n            </React.Fragment>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport { faListUl, faPen, faTrash, faPlus, faArrowCircleRight } from '@fortawesome/free-solid-svg-icons'\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport swal from '@sweetalert/with-react'\r\nimport {Spinner} from 'reactstrap'\r\nimport { ThemeContextProvider } from '../ThemeContext/ThemeContext';\r\nexport default class Dashboard extends Component {\r\n    static contextType = ThemeContextProvider\r\n    constructor(props) {\r\n        super(props)\r\n        this.state = {\r\n            lists: [],\r\n            listname: '',\r\n            taskname: '',\r\n            isloading: false\r\n        }\r\n    }\r\n\r\n    async componentDidMount() {\r\n        let userexist = JSON.parse(localStorage.getItem('todouser'))\r\n        console.log(userexist)\r\n        if (userexist) {\r\n            fetch(`https://todo-api-241.herokuapp.com/todoapi/get-user/${this.props.location.state.user._id}`, {\r\n                method: 'Get',\r\n                headers: {\r\n                    'Content-type': 'application/json'\r\n                }\r\n\r\n            })\r\n                .then((response) => response.json())\r\n                .then(resJson => this.setState({ lists: resJson.lists }))\r\n                .catch(err => err.message)\r\n        }\r\n        else {\r\n            this.props.history.push('/signin')\r\n        }\r\n\r\n\r\n\r\n    }\r\n\r\n    handleCreateList = async function () {\r\n        swal(\r\n            <div>\r\n\r\n                <label>\r\n                    Enter list name\r\n            </label>\r\n                <input onChange={(e) => this.setState({ listname: e.target.value })} type=\"text\" className=\"form-control\" placeholder=\"list name\" />\r\n            </div>,\r\n            {\r\n                button: {\r\n                    text: \"Create List\",\r\n                    closeModal: true\r\n                },\r\n\r\n            }\r\n\r\n        )\r\n            .then(async () => {\r\n                 this.setState({isloading:true})\r\n                if (this.state.listname) {\r\n                    this.setState({isloading:true})\r\n                    const newlists = await fetch(`https://todo-api-241.herokuapp.com/todoapi/create-list/${this.props.location.state.user._id}`, {\r\n                        method: 'Post',\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            listname: this.state.listname\r\n                        })\r\n\r\n                    })\r\n                        .then((response) => response.json())\r\n                        .then(resJson => resJson)\r\n                        .catch(err => err.message)\r\n                    console.log(newlists)\r\n                    if (newlists.error) {\r\n                        this.setState({isloading:false})\r\n                        swal(newlists.message, '', 'error')\r\n                    }\r\n                    else {\r\n                        this.setState({isloading:false})\r\n                        this.setState({listname:''})\r\n                        this.setState({ lists: newlists.lists })\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n    handleUpdateList = async function (id) {\r\n        swal(\r\n            <div>\r\n\r\n                <label>\r\n                    Update list name\r\n                </label>\r\n                <br />\r\n\r\n                <input onChange={(e) => this.setState({ listname: e.target.value })} type=\"text\" className=\"form-control\" placeholder=\"New list name\" />\r\n            </div>,\r\n            {\r\n                button: {\r\n                    text: \"Update List\",\r\n                    closeModal: true\r\n                },\r\n\r\n            }\r\n\r\n        )\r\n            .then(async () => {\r\n               \r\n                if (this.state.listname) {\r\n                    this.setState({isloading:true})\r\n                    const newlists = await fetch(`https://todo-api-241.herokuapp.com/todoapi/update-list/${this.props.location.state.user._id}/${id}`, {\r\n                        method: 'Post',\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            listname: this.state.listname\r\n                        })\r\n\r\n                    })\r\n                        .then((response) => response.json())\r\n                        .then(resJson => resJson)\r\n                        .catch(err => err.message)\r\n\r\n                    if (newlists.error) {\r\n                        this.setState({isloading:false})\r\n                        swal(newlists.message, '', 'error')\r\n                    }\r\n                    else {\r\n                        this.setState({isloading:false})\r\n                        this.setState({listname:''})\r\n                        this.setState({ lists: newlists.lists })\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    handleUpdateTask = async function (listId, taskId) {\r\n        swal(\r\n            <div>\r\n\r\n                <label>\r\n                    Update Task\r\n                </label>\r\n                <br />\r\n\r\n                <input onChange={(e) => this.setState({ taskname: e.target.value })} type=\"text\" className=\"form-control\" placeholder=\"New task name\" />\r\n            </div>,\r\n            {\r\n                button: {\r\n                    text: \"Update Task\",\r\n                    closeModal: true\r\n                },\r\n\r\n            }\r\n\r\n        )\r\n            .then(async () => {\r\n                \r\n                if (this.state.taskname) {\r\n                    this.setState({isloading:true})\r\n                    const newlists = await fetch(`https://todo-api-241.herokuapp.com/todoapi/update-task/${this.props.location.state.user._id}/${listId}/${taskId}`, {\r\n                        method: 'Post',\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            updatedTask: this.state.taskname\r\n                        })\r\n\r\n                    })\r\n                        .then((response) => response.json())\r\n                        .then(resJson => resJson)\r\n                        .catch(err => err.message)\r\n                    console.log(newlists)\r\n                    if (newlists.error) {\r\n                        this.setState({isloading:false})\r\n                        swal(newlists.message, '', 'error')\r\n                    }\r\n                    else {\r\n                        this.setState({isloading:false})\r\n                        this.setState({taskname:''})\r\n                        this.setState({ lists: newlists.lists })\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n\r\n    handleDeleteList = async function (id) {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: `This list would be deleted `,\r\n            icon: \"info\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then(async (willDelete) => {\r\n                this.setState({isloading:true})\r\n                if (willDelete) {\r\n\r\n                    const deleteResponse = await fetch(`https://todo-api-241.herokuapp.com/todoapi/delete-list/${this.props.location.state.user._id}/${id}`, {\r\n                        method: 'Delete',\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        }\r\n                    })\r\n                        .then((response) => response.json())\r\n                        .then(resJson => resJson)\r\n                        .catch(err => err.message)\r\n                    if (deleteResponse.error) {\r\n                        this.setState({isloading:false})\r\n                        swal(deleteResponse.message, '', 'error')\r\n                    }\r\n                    else {\r\n                        this.setState({isloading:false})\r\n                        swal('', 'List deleted', 'success')\r\n                        this.setState({ lists: deleteResponse.lists })\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n\r\n    handleDeleteTask = async function (listId, taskId) {\r\n        swal({\r\n            title: \"Are you sure?\",\r\n            text: `This task would be deleted `,\r\n            icon: \"info\",\r\n            buttons: true,\r\n            dangerMode: true,\r\n        })\r\n            .then(async (willDelete) => {\r\n                if (willDelete) {\r\n                    this.setState({isloading:true})\r\n                    const deleteResponse = await fetch(`https://todo-api-241.herokuapp.com/todoapi/delete-task/${this.props.location.state.user._id}/${listId}/${taskId}`, {\r\n                        method: 'Delete',\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        }\r\n                    })\r\n                        .then((response) => response.json())\r\n                        .then(resJson => resJson)\r\n                        .catch(err => err.message)\r\n                    if (deleteResponse.error) {\r\n                        this.setState({isloading:false})\r\n                        swal(deleteResponse.message, '', 'error')\r\n                    }\r\n                    else {\r\n                        this.setState({isloading:false})\r\n                        swal('', 'Task deleted', 'success')\r\n\r\n                        this.setState({ lists: deleteResponse.lists })\r\n                    }\r\n\r\n\r\n                }\r\n            })\r\n    }\r\n\r\n\r\n    handleAddTask = async function (id) {\r\n        swal(\r\n            <div>\r\n\r\n                <label>\r\n                    Enter task\r\n            </label>\r\n                <input onChange={(e) => this.setState({ taskname: e.target.value })} type=\"text\" className=\"form-control\" placeholder=\"Enter task\" />\r\n            </div>,\r\n            {\r\n                button: {\r\n                    text: \"Add task\",\r\n                    closeModal: true\r\n                },\r\n\r\n            }\r\n\r\n        )\r\n            .then(async () => {\r\n\r\n                if (this.state.taskname) {\r\n                    this.setState({isloading:true})\r\n                    const newlists = await fetch(`https://todo-api-241.herokuapp.com/todoapi/add-task/${this.props.location.state.user._id}/${id}`, {\r\n                        method: 'Post',\r\n                        headers: {\r\n                            'Content-type': 'application/json'\r\n                        },\r\n                        body: JSON.stringify({\r\n                            task: this.state.taskname\r\n                        })\r\n\r\n                    })\r\n                        .then((response) => response.json())\r\n                        .then(resJson => resJson)\r\n                        .catch(err => err.message)\r\n                    \r\n                    if (newlists.error) {\r\n                        this.setState({isloading:false})\r\n                        swal(newlists.message, '', 'error')\r\n                    }\r\n                    else {\r\n                        this.setState({isloading:false})\r\n                        this.setState({taskname:''})\r\n                        this.setState({ lists: newlists.lists })\r\n                    }\r\n\r\n                }\r\n\r\n            })\r\n\r\n\r\n\r\n    }\r\n    render() {\r\n        let { changeTheme, theme } = this.context\r\n        let user = {}\r\n        if (this.props.location.state) {\r\n            user = this.props.location.state.user\r\n        }\r\n        else {\r\n            user = { name: null }\r\n        }\r\n\r\n\r\n\r\n        return (\r\n            <div className={`container-fluid  p-0 ${theme === 'dark' ? 'bg-dark text-light' : 'bg-light text-secondary'} todo-cont`}>\r\n                <nav className={`todonav ${theme === 'dark' ? 'bg-dark text-light' : 'bg-dark text-light'}`}>\r\n                    <h5 className=\"\">Welcome {user.name}  </h5>\r\n\r\n                    <div className=\"check_cont\">\r\n                        <span className=\"dark\">Dark Mode</span>\r\n                        <input style={{ height: 16, width: 16, cursor: 'pointer' }} className=\"ml-2\" onChange={() => changeTheme()} type='checkbox' />\r\n                    </div>\r\n                    <div onClick={() => swal({\r\n                        title: \"Are you sure?\",\r\n                        text: ` `,\r\n                        icon: \"info\",\r\n                        buttons: true,\r\n                        dangerMode: true,\r\n                    }).then(() => {\r\n                        localStorage.clear('tododata')\r\n                        this.props.history.push('/signin')\r\n                    })\r\n                    }\r\n                        style={{ float: 'right', marginTop: -30, cursor: 'pointer' }}>\r\n                        <span className=\"logout\">Logout <FontAwesomeIcon icon={faArrowCircleRight} /> </span>\r\n                    </div>\r\n\r\n                </nav>\r\n                <div className=\"col-md-12 col-sm-12\">\r\n                    {\r\n                        this.state.isloading && <div className=\"row justify-content-center mt-1\">\r\n                        <Spinner/>\r\n                      </div>\r\n                    }\r\n                    \r\n                    <div style={{ width: 230 }} className=\"list-no mt-1\">\r\n                        Number of Lists <span className=\"badge badge-primary\">{this.state.lists.length}</span>\r\n                    </div>\r\n                    <div style={{ display: 'flex', justifyContent: 'flex-end' }} className=\"row mt-3\">\r\n                        <button onClick={() => this.handleCreateList()} className=\"btn btn-primary mr-4\">\r\n                            Create List <FontAwesomeIcon icon={faListUl} />\r\n                        </button>\r\n                    </div>\r\n\r\n                    {\r\n                        this.state.lists.length > 0 ?\r\n                            <div className=\"row p-2 mt-3\">\r\n                                {\r\n                                    this.state.lists.map((list) => {\r\n                                        return (\r\n                                            <div key={list.id} className={`col-md-3 col-sm-12`}>\r\n                                                <div className={`task-container ${theme === 'dark' ? 'bg-secondary text-light' : 'bg-light text-secondary'}`}>\r\n\r\n                                                    <div className={`${theme === 'dark' ? 'bg-secondary text-light' : 'bg-light text-secondary'}`}>\r\n                                                        <h5 className=\"pl-4 pt-4 pb-4 pr-2\"> {list.listname} <span style={{ fontSize: 10 }} className=\"ml-2 badge badge-primary\">{list.tasks.length} tasks</span>  <span style={{ float: 'right' }} onClick={() => this.handleDeleteList(list.id)} className=\"btn btn-sm p-1 btn-secondary\"><FontAwesomeIcon style={{ width: 12, height: 12 }} icon={faTrash} /></span> <span style={{ float: 'right' }} onClick={() => this.handleUpdateList(list.id)} className=\"btn mr-2 btn-sm p-1  btn-secondary\"><FontAwesomeIcon style={{ width: 12, height: 12 }} icon={faPen} /></span>  </h5>\r\n                                                    </div>\r\n                                                    {\r\n                                                        list.tasks.map((task, index) => {\r\n                                                            return (\r\n                                                                <div key={task.taskId} className=\"task pl-4 pr-2\">\r\n                                                                    <p className=\"task-text\"><span className=\"\">({index + 1})</span> {task.task} <span style={{ float: 'right' }} onClick={() => this.handleDeleteTask(list.id, task.taskId)} className=\"btn btn-sm  btn-light\"><FontAwesomeIcon icon={faTrash} style={{ width: 12, height: 12, color: 'rgba(0,0,0,0.6)' }} /></span> <span style={{ float: 'right' }} onClick={() => this.handleUpdateTask(list.id, task.taskId)} className=\"btn mr-2 btn-sm  btn-light\"><FontAwesomeIcon icon={faPen} style={{ width: 12, height: 12, color: 'rgba(0,0,0,0.6)' }} /></span>  </p>\r\n                                                                    <hr />\r\n                                                                </div>\r\n                                                            )\r\n\r\n                                                        })\r\n                                                    }\r\n\r\n\r\n\r\n                                                    <div style={{ display: 'flex', justifyContent: 'flex-end' }} className=\"row mt-3\">\r\n                                                        <button onClick={() => this.handleAddTask(list.id)} className=\"btn btn-primary mt-4 mb-2 mr-4\">\r\n                                                            Add task <FontAwesomeIcon icon={faPlus} />\r\n                                                        </button>\r\n                                                    </div>\r\n                                                </div>\r\n                                            </div>\r\n                                        )\r\n                                    })\r\n                                }\r\n\r\n                            </div>\r\n\r\n                            :\r\n                            <p className={`pretext ${theme === 'dark' ? 'text-light' : ' text-dark'}`}> Click on the \"Create List\" button to create a list</p>\r\n                    }\r\n\r\n                </div>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react';\r\n\r\nimport { BrowserRouter, Route, Switch } from 'react-router-dom'\r\nimport SignUp from './Components/Home/SignUp';\r\nimport SignIn from './Components/Home/Signin';\r\nimport Dashboard from './Components/Dashboard/Dashboard';\r\nimport ThemeContext from './Components/ThemeContext/ThemeContext';\r\n\r\nexport default class App extends Component {\r\n\r\n  render() {\r\n    return (\r\n      <ThemeContext>\r\n        <BrowserRouter>\r\n          <Switch>\r\n            <Route path=\"/\" component={SignUp} exact />\r\n            <Route path=\"/signin\" component={SignIn} />\r\n            <Route path=\"/dashboard\" component={Dashboard} />\r\n          </Switch>\r\n        </BrowserRouter>\r\n      </ThemeContext>\r\n\r\n\r\n    )\r\n  }\r\n}\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport './index.css';\r\nimport App from './App';\r\n\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.register();\r\n"],"sourceRoot":""}